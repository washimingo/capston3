{
  "version": 3,
  "sources": ["../../../../../../node_modules/ionicons/dist/esm/ion-icon.entry.js"],
  "sourcesContent": ["import { r as registerInstance, h, H as Host, g as getElement } from './index-Z3yp5Yym.js';\nimport { i as isStr, a as inheritAttributes, g as getUrl, b as getName, c as isRTL } from './index-RzboMlQJ.js';\n\nconst validateContent = (svgContent) => {\n    const div = document.createElement('div');\n    div.innerHTML = svgContent;\n    // setup this way to ensure it works on our buddy IE\n    for (let i = div.childNodes.length - 1; i >= 0; i--) {\n        if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n            div.removeChild(div.childNodes[i]);\n        }\n    }\n    // must only have 1 root element\n    const svgElm = div.firstElementChild;\n    if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n        const svgClass = svgElm.getAttribute('class') || '';\n        svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n        // root element must be an svg\n        // lets double check we've got valid elements\n        // do not allow scripts\n        if (isValid(svgElm)) {\n            return div.innerHTML;\n        }\n    }\n    return '';\n};\nconst isValid = (elm) => {\n    if (elm.nodeType === 1) {\n        if (elm.nodeName.toLowerCase() === 'script') {\n            return false;\n        }\n        for (let i = 0; i < elm.attributes.length; i++) {\n            const name = elm.attributes[i].name;\n            if (isStr(name) && name.toLowerCase().indexOf('on') === 0) {\n                return false;\n            }\n        }\n        for (let i = 0; i < elm.childNodes.length; i++) {\n            if (!isValid(elm.childNodes[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\nconst isSvgDataUrl = (url) => url.startsWith('data:image/svg+xml');\nconst isEncodedDataUrl = (url) => url.indexOf(';utf8,') !== -1;\n\nconst ioniconContent = new Map();\nconst requests = new Map();\nlet parser;\n/**\n * Safely fallback to an empty svg\n */\nfunction safeFallback(url) {\n    const svg = '';\n    ioniconContent.set(url, svg);\n    return svg;\n}\nconst getSvgContent = (url, sanitize) => {\n    /**\n     * See if we already have a request for this url\n     */\n    const req = requests.get(url);\n    if (req) {\n        return req;\n    }\n    if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n        /**\n         * If the url is a data url of an svg, then try to parse it\n         * with the DOMParser. This works with content security policies enabled.\n         */\n        if (isSvgDataUrl(url) && isEncodedDataUrl(url)) {\n            return Promise.resolve(getSvgByUrl(url));\n        }\n        return fetchSvg(url, sanitize);\n    }\n    return Promise.resolve(safeFallback(url));\n};\nfunction getSvgByUrl(url) {\n    if (!parser) {\n        /**\n         * Create an instance of the DOM parser. This creates a single\n         * parser instance for the entire app, which is more efficient.\n         */\n        parser = new DOMParser();\n    }\n    const doc = parser.parseFromString(url, 'text/html');\n    const svg = doc.querySelector('svg');\n    if (svg) {\n        ioniconContent.set(url, svg.outerHTML);\n        return svg.outerHTML;\n    }\n    throw new Error(`Could not parse svg from ${url}`);\n}\nfunction fetchSvg(url, sanitize) {\n    /**\n     * We don't already have a request\n     */\n    const req = fetch(url)\n        .then((rsp) => {\n        /**\n         * When fetching from a file:// URL, some browsers return\n         * a 0 status code even when the request succeeds so don't\n         * rely on rsp.ok as the only signal of success.\n         */\n        return rsp\n            .text()\n            .then((svgContent) => {\n            if (svgContent && sanitize !== false) {\n                svgContent = validateContent(svgContent);\n            }\n            const svg = svgContent || '';\n            ioniconContent.set(url, svg);\n            return svg;\n        })\n            .catch(() => safeFallback(url));\n    })\n        .catch(() => safeFallback(url));\n    /**\n     * Cache for the same requests\n     */\n    requests.set(url, req);\n    return req;\n}\n\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}@supports (background: -webkit-named-image(i)){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}@supports not selector(:dir(rtl)) and selector(:host-context([dir='rtl'])){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}:host(.flip-rtl):host-context([dir='rtl']) .icon-inner{transform:scaleX(-1)}@supports selector(:dir(rtl)){:host(.flip-rtl:dir(rtl)) .icon-inner{transform:scaleX(-1)}:host(.flip-rtl:dir(ltr)) .icon-inner{transform:scaleX(1)}}:host(.icon-small){font-size:1.125rem !important}:host(.icon-large){font-size:2rem !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\n\nconst Icon = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.iconName = null;\n        this.inheritedAttributes = {};\n        this.didLoadIcon = false;\n        this.isVisible = false;\n        /**\n         * The mode determines which platform styles to use.\n         */\n        this.mode = getIonMode();\n        /**\n         * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n         * Default, `false`.\n         */\n        this.lazy = false;\n        /**\n         * When set to `false`, SVG content that is HTTP fetched will not be checked\n         * if the response SVG content has any `<script>` elements, or any attributes\n         * that start with `on`, such as `onclick`.\n         * @default true\n         */\n        this.sanitize = true;\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n    }\n    connectedCallback() {\n        /**\n         * purposely do not return the promise here because loading\n         * the svg file should not hold up loading the app\n         * only load the svg if it's visible\n         */\n        this.waitUntilVisible(this.el, '50px', () => {\n            this.isVisible = true;\n            this.loadIcon();\n        });\n    }\n    /**\n     * Loads the icon after the component has finished rendering.\n     */\n    componentDidLoad() {\n        /**\n         * Addresses an Angular issue where property values are assigned after the 'connectedCallback' but prior to the registration of watchers.\n         * This enhancement ensures the loading of an icon when the component has finished rendering and the icon has yet to apply the SVG data.\n         * This modification pertains to the usage of Angular's binding syntax:\n         * `<ion-icon [name]=\"myIconName\"></ion-icon>`\n         */\n        if (!this.didLoadIcon) {\n            this.loadIcon();\n        }\n    }\n    /**\n     * Disconnect the IntersectionObserver.\n     */\n    disconnectedCallback() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n    /**\n     * Wait until the icon is visible in the viewport.\n     * @param el - The element to observe.\n     * @param rootMargin - The root margin of the observer.\n     * @param cb - The callback to call when the element is visible.\n     */\n    waitUntilVisible(el, rootMargin, cb) {\n        /**\n         * IntersectionObserver is a browser API that allows you to observe\n         * the visibility of an element relative to a root element. It is\n         * supported in all modern browsers, except IE and when server-side\n         * rendering.\n         */\n        const hasIntersectionObserverSupport = Boolean(this.lazy && typeof window !== 'undefined' && window.IntersectionObserver);\n        /**\n         * browser doesn't support IntersectionObserver\n         * so just fallback to always show it\n         */\n        if (!hasIntersectionObserverSupport) {\n            return cb();\n        }\n        const io = (this.io = new window.IntersectionObserver((data) => {\n            if (data[0].isIntersecting) {\n                io.disconnect();\n                this.io = undefined;\n                cb();\n            }\n        }, { rootMargin }));\n        io.observe(el);\n    }\n    /**\n     * Watch for changes to the icon name, src, icon, ios, or md properties.\n     * When a change is detected, the icon will be loaded.\n     */\n    loadIcon() {\n        if (this.isVisible) {\n            const url = getUrl(this);\n            if (url) {\n                if (ioniconContent.has(url)) {\n                    // sync if it's already loaded\n                    this.svgContent = ioniconContent.get(url);\n                }\n                else {\n                    // async if it hasn't been loaded\n                    getSvgContent(url, this.sanitize).then(() => (this.svgContent = ioniconContent.get(url)));\n                }\n                this.didLoadIcon = true;\n            }\n        }\n        this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n    }\n    render() {\n        const { flipRtl, iconName, inheritedAttributes, el } = this;\n        const mode = this.mode || 'md';\n        /**\n         * we have designated that arrows & chevrons should automatically flip (unless flip-rtl\n         * is set to false) because \"back\" is left in ltr and right in rtl, and \"forward\" is the opposite\n         */\n        const shouldAutoFlip = iconName\n            ? (iconName.includes('arrow') || iconName.includes('chevron')) && flipRtl !== false\n            : false;\n        /**\n         * if shouldBeFlippable is true, the icon should change direction when `dir` changes\n         */\n        const shouldBeFlippable = flipRtl || shouldAutoFlip;\n        return (h(Host, Object.assign({ key: '0578c899781ca145dd8205acd9670af39b57cf2e', role: \"img\", class: Object.assign(Object.assign({ [mode]: true }, createColorClasses(this.color)), { [`icon-${this.size}`]: !!this.size, 'flip-rtl': shouldBeFlippable, 'icon-rtl': shouldBeFlippable && isRTL(el) }) }, inheritedAttributes), this.svgContent ? (h(\"div\", { class: \"icon-inner\", innerHTML: this.svgContent })) : (h(\"div\", { class: \"icon-inner\" }))));\n    }\n    static get assetsDirs() { return [\"svg\"]; }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"name\": [\"loadIcon\"],\n        \"src\": [\"loadIcon\"],\n        \"icon\": [\"loadIcon\"],\n        \"ios\": [\"loadIcon\"],\n        \"md\": [\"loadIcon\"]\n    }; }\n};\n/**\n * Get the mode of the document.\n * @returns The mode of the document.\n */\nconst getIonMode = () => (typeof document !== 'undefined' && document.documentElement.getAttribute('mode')) || 'md';\n/**\n * Create color classes for the icon.\n * @param color - The color of the icon.\n * @returns The color classes for the icon.\n */\nconst createColorClasses = (color) => {\n    return color\n        ? {\n            'ion-color': true,\n            [`ion-color-${color}`]: true,\n        }\n        : null;\n};\nIcon.style = iconCss;\n\nexport { Icon as ion_icon };\n"],
  "mappings": "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",
  "names": []
}
